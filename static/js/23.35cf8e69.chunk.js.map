{"version":3,"sources":["hooks/useIsVisible.js","components/State.js"],"names":["OPTIONS","root","rootMargin","threshold","useIsVisible","elementRef","useState","isVisible","setIsVisible","useEffect","current","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","unobserve","observe","DeltaBarGraph","lazy","retry","Footer","Level","VaccinationHeader","MapExplorer","MapSwitcher","Minigraphs","StateHeader","StateMeta","State","t","useTranslation","stateCode","useSessionStorage","mapStatistic","setMapStatistic","showAllDistricts","setShowAllDistricts","districtName","regionHighlighted","setRegionHighlighted","delta7Mode","setDelta7Mode","useSWR","DATA_API_ROOT","fetcher","revalidateOnMount","refreshInterval","timeseries","data","timeseriesResponseError","error","console","log","stateData","gridRowCount","useMemo","gridColumnCount","window","innerWidth","districtCount","districts","Object","keys","filter","length","Math","ceil","stateMetaElement","useRef","isStateMetaVisible","trail","styles","map","element","index","push","animationDelay","lookback","lastDataDate","updatedDates","meta","date","tested","vaccinated","formatISO","max","parseIndiaDate","representation","primaryStatistic","MAP_STATISTICS","includes","noDistrictData","UNKNOWN_DISTRICT_KEY","PRIMARY_STATISTICS","every","statistic","getStatistic","statisticConfig","STATISTIC_CONFIGS","noRegionHighlightedDistrictData","hasPrimary","Helmet","STATE_NAMES","name","content","className","style","position","dates","forceRender","total","vaccinated1","fallback","minHeight","ref","classnames","expanded","gridTemplateRows","sort","a","b","districtNameA","districtNameB","districtA","districtB","handleSort","slice","undefined","delta","formatNumber","onClick","height","flexBasis","memo"],"mappings":"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","file":"static/js/23.35cf8e69.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\n\nconst OPTIONS = {\n  root: null,\n  rootMargin: '0px 0px 0px 0px',\n  threshold: 0,\n};\n\nconst useIsVisible = (elementRef) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    if (elementRef.current) {\n      const observer = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            setIsVisible(true);\n            observer.unobserve(elementRef.current);\n          }\n        });\n      }, OPTIONS);\n      observer.observe(elementRef.current);\n    }\n  }, [elementRef]);\n\n  return isVisible;\n};\n\nexport default useIsVisible;\n","import {\n  DATA_API_ROOT,\n  MAP_STATISTICS,\n  PRIMARY_STATISTICS,\n  STATE_NAMES,\n  STATISTIC_CONFIGS,\n  UNKNOWN_DISTRICT_KEY,\n} from '../constants';\nimport useIsVisible from '../hooks/useIsVisible';\nimport {\n  fetcher,\n  formatNumber,\n  getStatistic,\n  parseIndiaDate,\n  retry,\n} from '../utils/commonFunctions';\n\nimport {SmileyIcon} from '@primer/octicons-react';\nimport classnames from 'classnames';\nimport {formatISO, max} from 'date-fns';\nimport {\n  memo,\n  useMemo,\n  useState,\n  useEffect,\n  lazy,\n  Suspense,\n  useRef,\n} from 'react';\nimport {Helmet} from 'react-helmet';\nimport {useTranslation} from 'react-i18next';\nimport {useSessionStorage} from 'react-use';\nimport useSWR from 'swr';\n\nconst DeltaBarGraph = lazy(() => retry(() => import('./DeltaBarGraph')));\nconst Footer = lazy(() => retry(() => import('./Footer')));\nconst Level = lazy(() => retry(() => import('./Level')));\nconst VaccinationHeader = lazy(() =>\n  retry(() => import('./VaccinationHeader'))\n);\nconst MapExplorer = lazy(() => retry(() => import('./MapExplorer')));\nconst MapSwitcher = lazy(() => retry(() => import('./MapSwitcher')));\nconst Minigraphs = lazy(() => retry(() => import('./Minigraphs')));\nconst StateHeader = lazy(() => retry(() => import('./StateHeader')));\nconst StateMeta = lazy(() => retry(() => import('./StateMeta')));\n\nfunction State() {\n  const {t} = useTranslation();\n\n  // const stateCode = useParams().stateCode.toUpperCase();\n  const stateCode = 'JK';\n\n  const [mapStatistic, setMapStatistic] = useSessionStorage(\n    'mapStatistic',\n    'active'\n  );\n  const [showAllDistricts, setShowAllDistricts] = useState(false);\n  const [regionHighlighted, setRegionHighlighted] = useState({\n    stateCode: stateCode,\n    districtName: null,\n  });\n  const [delta7Mode, setDelta7Mode] = useState(false);\n\n  useEffect(() => {\n    if (regionHighlighted.stateCode !== stateCode) {\n      setRegionHighlighted({\n        stateCode: stateCode,\n        districtName: null,\n      });\n      setShowAllDistricts(false);\n    }\n  }, [regionHighlighted.stateCode, stateCode]);\n\n  const {data: timeseries, error: timeseriesResponseError} = useSWR(\n    `${DATA_API_ROOT}/timeseries-${stateCode}.min.json`,\n    fetcher,\n    {\n      revalidateOnMount: true,\n      refreshInterval: 100000,\n    }\n  );\n\n  const {data} = useSWR(`${DATA_API_ROOT}/data.min.json`, fetcher, {\n    revalidateOnMount: true,\n    refreshInterval: 100000,\n  });\n\n  console.log(data?.['JK']);\n\n  const stateData = data?.[stateCode];\n\n  const toggleShowAllDistricts = () => {\n    setShowAllDistricts(!showAllDistricts);\n  };\n\n  const handleSort = (districtNameA, districtNameB) => {\n    const districtA = stateData.districts[districtNameA];\n    const districtB = stateData.districts[districtNameB];\n    return (\n      getStatistic(districtB, 'total', mapStatistic) -\n      getStatistic(districtA, 'total', mapStatistic)\n    );\n  };\n\n  const gridRowCount = useMemo(() => {\n    if (!stateData) return;\n    const gridColumnCount = window.innerWidth >= 540 ? 3 : 2;\n    const districtCount = stateData?.districts\n      ? Object.keys(stateData.districts).filter(\n          (districtName) => districtName !== 'Unknown'\n        ).length\n      : 0;\n    const gridRowCount = Math.ceil(districtCount / gridColumnCount);\n    return gridRowCount;\n  }, [stateData]);\n\n  const stateMetaElement = useRef();\n  const isStateMetaVisible = useIsVisible(stateMetaElement);\n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  const lookback = showAllDistricts ? (window.innerWidth >= 540 ? 10 : 8) : 6;\n\n  const lastDataDate = useMemo(() => {\n    const updatedDates = [\n      stateData?.meta?.date,\n      stateData?.meta?.tested?.date,\n      stateData?.meta?.vaccinated?.date,\n    ].filter((date) => date);\n    return updatedDates.length > 0\n      ? formatISO(max(updatedDates.map((date) => parseIndiaDate(date))), {\n          representation: 'date',\n        })\n      : null;\n  }, [stateData]);\n\n  const primaryStatistic = MAP_STATISTICS.includes(mapStatistic)\n    ? mapStatistic\n    : 'confirmed';\n\n  const noDistrictData = useMemo(() => {\n    // Heuristic: All cases are in Unknown\n    return !!(\n      stateData?.districts &&\n      stateData.districts?.[UNKNOWN_DISTRICT_KEY] &&\n      PRIMARY_STATISTICS.every(\n        (statistic) =>\n          getStatistic(stateData, 'total', statistic) ===\n          getStatistic(\n            stateData.districts[UNKNOWN_DISTRICT_KEY],\n            'total',\n            statistic\n          )\n      )\n    );\n  }, [stateData]);\n\n  const statisticConfig = STATISTIC_CONFIGS[primaryStatistic];\n\n  const noRegionHighlightedDistrictData =\n    regionHighlighted?.districtName &&\n    regionHighlighted.districtName !== UNKNOWN_DISTRICT_KEY &&\n    noDistrictData;\n\n  const districts = Object.keys(\n    ((!noDistrictData || !statisticConfig.hasPrimary) &&\n      stateData?.districts) ||\n      {}\n  );\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          Coronavirus Outbreak in {STATE_NAMES[stateCode]} - covid19kashmir.org\n        </title>\n        <meta\n          name=\"title\"\n          content={`Coronavirus Outbreak in ${STATE_NAMES[stateCode]}: Latest Map and Case Count`}\n        />\n      </Helmet>\n\n      <div className=\"State\">\n        <div className=\"state-left\">\n          <StateHeader data={stateData} stateCode={stateCode} />\n\n          <div style={{position: 'relative'}}>\n            <MapSwitcher {...{mapStatistic, setMapStatistic}} />\n            <Level data={stateData} />\n            <Minigraphs\n              timeseries={timeseries?.[stateCode]?.dates}\n              {...{stateCode}}\n              forceRender={!!timeseriesResponseError}\n            />\n          </div>\n\n          {stateData?.total?.vaccinated1 && (\n            <VaccinationHeader data={stateData} />\n          )}\n\n          {data && (\n            <Suspense fallback={<div style={{minHeight: '50rem'}} />}>\n              <MapExplorer\n                {...{\n                  stateCode,\n                  data,\n                  regionHighlighted,\n                  setRegionHighlighted,\n                  mapStatistic,\n                  setMapStatistic,\n                  lastDataDate,\n                  delta7Mode,\n                  setDelta7Mode,\n                  noRegionHighlightedDistrictData,\n                  noDistrictData,\n                }}\n              ></MapExplorer>\n            </Suspense>\n          )}\n\n          <span ref={stateMetaElement} />\n\n          {isStateMetaVisible && data && (\n            <Suspense fallback={<div />}>\n              <StateMeta\n                {...{\n                  stateCode,\n                  data,\n                }}\n                timeseries={timeseries?.[stateCode]?.dates}\n              />\n            </Suspense>\n          )}\n        </div>\n\n        <div className=\"state-right\">\n          <>\n            <div className=\"district-bar\">\n              <div\n                className={classnames('district-bar-top', {\n                  expanded: showAllDistricts,\n                })}\n              >\n                <div className=\"district-bar-left\">\n                  <h2\n                    className={classnames(primaryStatistic, 'fadeInUp')}\n                    style={trail[0]}\n                  >\n                    {t('Top districts')}\n                  </h2>\n                  <div\n                    className={`districts fadeInUp ${\n                      showAllDistricts ? 'is-grid' : ''\n                    }`}\n                    style={\n                      showAllDistricts\n                        ? {\n                            gridTemplateRows: `repeat(${gridRowCount}, 2rem)`,\n                            ...trail[1],\n                          }\n                        : trail[1]\n                    }\n                  >\n                    {districts\n                      .filter((districtName) => districtName !== 'Unknown')\n                      .sort((a, b) => handleSort(a, b))\n                      .slice(0, showAllDistricts ? undefined : 5)\n                      .map((districtName) => {\n                        const total = getStatistic(\n                          stateData.districts[districtName],\n                          'total',\n                          primaryStatistic\n                        );\n                        const delta = getStatistic(\n                          stateData.districts[districtName],\n                          'delta',\n                          primaryStatistic\n                        );\n                        return (\n                          <div key={districtName} className=\"district\">\n                            <h2>{formatNumber(total)}</h2>\n                            <h5>{t(districtName)}</h5>\n                            {primaryStatistic !== 'active' && (\n                              <div className=\"delta\">\n                                <h6 className={primaryStatistic}>\n                                  {delta > 0\n                                    ? '\\u2191' + formatNumber(delta)\n                                    : ''}\n                                </h6>\n                              </div>\n                            )}\n                          </div>\n                        );\n                      })}\n                  </div>\n                </div>\n\n                <div className=\"district-bar-right fadeInUp\" style={trail[2]}>\n                  {timeseries &&\n                    (primaryStatistic === 'confirmed' ||\n                      primaryStatistic === 'deceased') && (\n                      <div className=\"happy-sign\">\n                        {Object.keys(timeseries[stateCode]?.dates || {})\n                          .slice(-lookback)\n                          .every(\n                            (date) =>\n                              getStatistic(\n                                timeseries[stateCode].dates[date],\n                                'delta',\n                                primaryStatistic\n                              ) === 0\n                          ) && (\n                          <div\n                            className={`alert ${\n                              primaryStatistic === 'confirmed' ? 'is-green' : ''\n                            }`}\n                          >\n                            <SmileyIcon />\n                            <div className=\"alert-right\">\n                              No new {primaryStatistic} cases in the past five\n                              days\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  <DeltaBarGraph\n                    timeseries={timeseries?.[stateCode]?.dates}\n                    statistic={primaryStatistic}\n                    {...{stateCode, lookback}}\n                    forceRender={!!timeseriesResponseError}\n                  />\n                </div>\n              </div>\n\n              <div className=\"district-bar-bottom\">\n                {districts.length > 5 ? (\n                  <button\n                    className=\"button fadeInUp\"\n                    onClick={toggleShowAllDistricts}\n                    style={trail[3]}\n                  >\n                    <span>\n                      {t(showAllDistricts ? 'View less' : 'View all')}\n                    </span>\n                  </button>\n                ) : (\n                  <div style={{height: '3.75rem', flexBasis: '15%'}} />\n                )}\n              </div>\n            </div>\n          </>\n        </div>\n      </div>\n\n      <Footer />\n    </>\n  );\n}\n\nexport default memo(State);\n"],"sourceRoot":""}